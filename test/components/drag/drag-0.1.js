// Generated by CoffeeScript 1.6.2
/**
# Drag框架的基础对象
# @class Dg
*/


(function() {
  var Dg,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dg = (function() {
    /**
    	# 设定当前版本
    	# 
    	# @property VERSION
    	# @type String
    	# @static
    	# @final
    */
    function Dg() {}

    Dg.VERSION = "0.1";

    /**
    	# 判断实例是否为节点
    	# 
    	# @static
    	# @method isNode
    	# @param n {Obejct} 指定节点
    	# @return {Boolean} 如果是返回true
    */


    Dg.isNode = function(n) {
      return n instanceof Dg.Node;
    };

    /**
    	# 判断实例是否为布局面板
    	# 
    	# @static
    	# @method isDraw
    	# @param n {Obejct} 指定节点
    	# @return {Boolean} 如果是返回true
    */


    Dg.isDraw = function(n) {
      return n instanceof Dg.Draw;
    };

    /**
    	# 迭代给定的节点列表，并回调执行方法
    	# 
    	# @static
    	# @method listNodes
    	# @param n {Obejct} 指定节点或者节点列表
    	# @param fuc {Function} 需执行的方法
    */


    Dg.listNodes = function(c, fuc) {
      var doFuc;

      doFuc = function(n) {
        if (Dg.isNode(n)) {
          return fuc(n);
        }
      };
      if (_.isArray(c)) {
        return _.each(c, doFuc);
      } else {
        return doFuc(c);
      }
    };

    /**
    	# 查找节点的布局面板节点
    	# 
    	# @static
    	# @method findDraw
    	# @param n {Obejct} 指定节点
    	# @return {Obejct} 找到返回布局面板节点否则返回null
    */


    Dg.findDraw = function(n) {
      if (n.parent) {
        if (Dg.isNode(n.parent)) {
          return Dg.findDraw(n.parent);
        }
      } else {
        if (Dg.isDraw(n)) {
          return n;
        } else {
          return null;
        }
      }
    };

    /**
    	# 添加子节点到当前节点中
    	# 
    	# @static
    	# @method getKeyCode
    	# @param e {Events} 事件对象
    	# @return {Integer} 当前按键对于键码值
    */


    Dg.getKeyCode = function(e) {
      var k;

      if (e.which) {
        k = e.keyCode;
      } else if (e.which !== 0 && e.charCode !== 0) {
        k = e.which;
      } else {

      }
      return k;
    };

    return Dg;

  })();

  if (window) {
    window.Dg = Dg;
  }

  /**
  # 基础节点，提供通用方法支持
  # @class Dg.Node
  */


  Dg.Node = (function() {
    /**
    	# @class Dg.Node
    	# @constructor
    	# @param left {Integer} 相对于父节点左边位置的像素
    	# @param top {Integer} 相对于父节点上边位置的像素
    	# @param height {Integer} 节点的高度
    	# @param width {Integer} 节点的宽度
    */

    var getNodeId, getWrap;

    function Node(left, top, height, width) {
      if (!left) {
        left = 0;
      }
      if (!top) {
        top = 0;
      }
      this.prop = {};
      this.prop.left = left;
      this.prop.top = top;
      this.prop.height = height;
      this.prop.width = width;
      this.parent = null;
      this.children = [];
      this.nodeId = getNodeId("node");
      this.wrap = getWrap(this.prop, this.nodeId);
    }

    /**
    	# 获取包裹该节点的jquery对象
    	# 
    	# @static
    	# @method getWrap
    	# @param prop {Integer} 相对于父节点左边位置的像素
    	# @param nodeId {String} 相对于父节点上边位置的像素
    	# @return {Object} 返回该节点对应的jquery对象
    */


    getWrap = function(prop, nodeId) {
      var css;

      css = {
        left: prop.left,
        top: prop.top,
        position: 'absolute',
        border: 'blue dashed thin',
        overflow: 'hidden'
      };
      return $('<div id="' + nodeId + '"></div>').css(css);
    };

    /**
    	# 获取该节点的唯一标识
    	# 
    	# @static
    	# @method getNodeId
    	# @param name {String} 指定标识的前缀
    	# @return {String} 返回该节点的唯一标识
    */


    getNodeId = function(name) {
      return name + "_" + new Date().getTime();
    };

    /**
    	# 获取该节点的子节点，只返回直接子节点
    	# 
    	# @method getChildren
    	# @return {Array} 以数组的形式返回子节点
    */


    Node.prototype.getChildren = function() {
      return children;
    };

    /**
    	# 添加子节点到当前节点中
    	# 
    	# @method addChildren
    	# @chainable
    	# @param nodes {Object} 子节点，支持一个或者多个
    	# @return {Object} 当前节点
    */


    Node.prototype.addChildren = function(c) {
      var self;

      self = this;
      Dg.listNodes(c, function(n) {
        self.children.push(n);
        n.parent = self;
        self.wrap.append(n.wrap);
        return n.render();
      });
      return self;
    };

    /**
    	# 添加子节点到当前节点中
    	# 
    	# @method removeChildren
    	# @chainable
    	# @param nodes {Object} 子节点，支持一个或者多个
    	# @return {Object} 当前节点
    */


    Node.prototype.removeChildren = function(c) {
      var self;

      self = this;
      Dg.listNodes(c, function(n) {
        self.children = _.without(children, n);
        n.parent = null;
        return self.wrap.remove(n.wrap);
      });
      return self;
    };

    /**
    	# 绘制当前节点显示界面
    	# 
    	# @method render
    	# @chainable
    	# @return {Object} 当前节点
    */


    Node.prototype.render = function() {
      var self, wrap;

      self = this;
      wrap = this.wrap;
      if (!this.prop.height) {
        if (this.parent) {
          this.prop.height = this.parent.wrap.css("height").replace("px", "") - 2;
        } else {
          this.prop.height = 200;
        }
      }
      wrap.css("height", this.prop.height + "px");
      if (!this.prop.width) {
        if (this.parent) {
          this.prop.width = this.parent.wrap.css("width").replace("px", "") - 2;
        } else {
          this.prop.width = 200;
        }
      }
      wrap.css("width", this.prop.width + "px");
      wrap.draggable({
        containment: "parent"
      });
      wrap.mousedown(function() {
        return $(this).css("cursor", "move");
      });
      wrap.mouseup(function() {
        return $(this).css("cursor", "");
      });
      wrap.click(function() {
        var d;

        d = Dg.findDraw(self);
        if (d) {
          if (d.selectedWidget && d.selectedWidget.wrap) {
            d.selectedWidget.wrap.css("border", "blue dashed thin");
          }
          d.selectedWidget = self;
          $(this).css("border", "blue solid thin");
        }
        return false;
      });
      wrap.dblclick(function() {
        alert(1);
        return false;
      });
      wrap.selectable();
      this.renderContent(wrap);
      return self;
    };

    /**
    	# 绘制子节点显示界面
    	# 
    	# @method render
    	# @chainable
    	# @return {Object} 当前节点
    */


    Node.prototype.renderChildren = function() {
      var wrap;

      wrap = this.wrap;
      _.each(this.children, function(n) {
        var vc;

        vc = wrap.find(n);
        if (vc) {
          vc.remove();
        }
        wrap.append(n);
        return n.render();
      });
      return this;
    };

    /**
    	# 绘制子节点显示界面
    	# 
    	# @method render
    	# @param wrap {Object} 子节点，支持一个或者多个
    	# @return {Object} 当前节点
    */


    Node.prototype.renderContent = function(wrap) {};

    return Node;

  })();

  /**
  # 布局面板，用于生成界面的显示效果
  # @class Dg.Draw
  # @extends Dg.Node
  */


  Dg.Draw = (function(_super) {
    __extends(Draw, _super);

    /**
    	# @class Dg.Draw
    	# @constructor
    	# @param id {String} 布局面板需要依托的html节点
    	# @param height {Integer} 节点的高度
    	# @param width {Integer} 节点的宽度
    */


    function Draw(id, height, width) {
      var bc, ct, dg, pl, root,
        _this = this;

      Draw.__super__.constructor.call(this, 0, 0, height, width);
      if (!id) {
        alert("id not found");
      }
      if (!height) {
        height = 600;
      }
      root = $('#' + id);
      root.empty();
      ct = {
        'margin-right': 'auto',
        'margin-left': 'auto'
      };
      if (width) {
        ct.width = width + 'px';
      }
      dg = $('<div id="drag"></div>');
      root.append(dg);
      dg.css(ct);
      dg.css({
        'background': '#FFFFFF url(img/bg.png) repeat 51% 0%',
        'position': 'relative',
        'height': height + 'px',
        'overflow-y': 'scroll'
      });
      dg.css({
        'height': height + 'px'
      });
      pl = $('<div id="panel"></div>');
      this.wrap = pl;
      this.panel = pl;
      dg.append(pl);
      pl.css({
        position: 'relative',
        'height': '2000px'
      });
      this.prop.width = Number(pl.css("width").replace("px", ""));
      this.prop.height = Number(pl.css("height").replace("px", ""));
      bc = $('<div id="breadcrumb"></div>');
      root.append(bc);
      bc.css(ct);
      $(document).keydown(function(e) {
        if (_this.selectedWidget) {
          return _this.moveNode(_this.selectedWidget, Dg.getKeyCode(e));
        }
      });
      this.render = function() {};
    }

    /**
    	# 使用方向键移动节点
    	# 
    	# @method moveNode
    	# @chainable
    	# @param n {Object} 需移动的节点
    	# @param k {Object} 当前按键对于键码值
    	# @param s {Object} 移动的步长
    */


    Draw.prototype.moveNode = function(n, k, s) {
      var ht, l, p, pht, pwd, t, w, wd;

      if (n && k >= 37 && k <= 40) {
        w = n.wrap;
        p = n.parent;
        if (!s) {
          s = 1;
        }
        switch (k) {
          case 37:
            l = Number(w.css("left").replace("px", ""));
            if (l > 0) {
              w.css("left", l - s + "px");
            }
            break;
          case 38:
            t = Number(w.css("top").replace("px", ""));
            if (t > 0) {
              w.css("top", t - s + "px");
            }
            break;
          case 39:
            l = Number(w.css("left").replace("px", ""));
            wd = n.prop.width;
            pwd = p.prop.width;
            if (pwd > wd + l + 2) {
              w.css("left", l + s + "px");
            }
            break;
          case 40:
            t = Number(w.css("top").replace("px", ""));
            ht = n.prop.height;
            pht = p.prop.height;
            if (pht > ht + t + 2) {
              w.css("top", t + s + "px");
            }
        }
        return false;
      }
    };

    return Draw;

  })(Dg.Node);

}).call(this);

/*
//@ sourceMappingURL=drag-0.1.map
*/
